#!/usr/bin/env perl

use warnings;
use strict;

use Getopt::Long     qw(GetOptions);
use DynaLoader       qw();
use Pod::Usage;
use IPC::Cmd         qw(can_run run);
use Memoize;

our $VERSION = '0.01';

####
#### CONSTANTS
####

my $MISSING_MATCH       = qr/ \A [*] MISSING [*] (.*) \z/xms;

my $READELF_OPTS        = '--dynamic';
my $READELF_ERROR       = qr/ \A readelf: [ ] Error: [ ] (.*) /xms;

my $READELF_SHARED_LIBS = qr{ Shared[ ]library:
                              [ ] [[] ([\w.]*) []] }xms;

# Ignore libs from packages: glibc gcc-libs crypt
my $IGNORELIB_LIST =
    'lib(?:' . ( join '|', ( sort split /\s+/, << 'END_LIST' ) ) . ').so';
BrokenLocale anl c cidn crypt dl m nsl nss_compat nss_dns nss_files
nss_hesiod nss_nis nss_nisplus pthread resolv rt c m crypt X11 z bz2
gcc_s gfortran gomp mudflap mudflapth objc ssp stdc++ util
END_LIST

my $IGNORELIB_MATCH = qr/$IGNORELIB_LIST/o;

####
#### GLOBALS
####

my ($PACMAN_PATH, $READELF_PATH, $OPT_PRINT_PATH);


####
#### FUNCTIONS
####

#---FUNCTION---
# Usage   : my @needed_libs = readelf_depends($elf_file)
# Purpose : Reads the shared libraries the ELF binary file depends on to run
# Params  : elf_filepath - absolute path to an ELF binary
# Returns : List of library names that the ELF binary depends on.
#--------------
sub readelf_depends
{
    my ($elf_filepath) = @_;
    my ($success, $readelf_output);

    $success = run( command => [ $READELF_PATH, $READELF_OPTS, $elf_filepath ],
                    buffer  => \$readelf_output );

    if ( !$success ) {
        my ($error) = $readelf_output =~ /$READELF_ERROR/;
        die "readelf command failed: $error\n";
    }

    my @libs = grep { !/$IGNORELIB_MATCH/ }
        $readelf_output =~ /$READELF_SHARED_LIBS/g;

    return @libs;
}
memoize('readelf_depends');

#---FUNCTION---
# Usage   : my @output_lines = print_tree( $tree, $maxdepth );
# Purpose : Prints a tree structure to the shell in ASCII text, like the
#           tree directory listing command.
# Params  : $tree     - Array reference that represents a tree
#           $maxdepth - How deep in the tree to display, depth 0 is the root
# Returns : Nothing.
#--------------
sub print_tree
{
    die 'Invalid arguments to print_tree()' if @_ < 2;
    my ($dep_tree, $max_depth, $print_paths) = @_;
    my ($closure);

    #---CLOSURE---
    # Params : $tree         - current sub-tree we are recursing over
    #                          (even a node is its own sub-tree)
    #          $depth        - the current depth level, basically a counter
    #          $depth_counts - A stack of item counts at each depth level,
    #                          used to display vertical lines.
    #-------------
    $closure = sub {
        die q{Invalid arguments to print_tree's internal closure} if @_ != 3;
        my ($tree, $depth, $depth_counts) = @_;

        return () if ( $depth-- < 0 );

        my $node_text = ( $print_paths ? $tree->[0][1] : $tree->[0][0] );

        my $prefix = '';
        if ( @$depth_counts ) {
            # If there are no more items in a depth above us, they
            # won't need a line to represent their branch.
            for my $i ( 0 .. $#$depth_counts-1 ) {
                my $nodes_on_depth = $depth_counts->[$i];
                $prefix .= ( $nodes_on_depth > 0 ? '|   ' : '    ' );
            }

            # If this is the last item, make a curved "twig".
            my $more_siblings = --$depth_counts->[-1];
            $prefix .= ( $more_siblings ? '|-- ' : '`-- ' );
        }

        #my @tree_lines = ( "$prefix$node_name\n" );
        print "$prefix$node_text\n";

        # Recurse through the the children nodes...
        my $child_count = $#$tree;
        for my $i ( 1 .. $#$tree ) {
            #push @tree_lines,
            $closure->( $tree->[$i], $depth,
                        [ @$depth_counts,
                          $child_count-- ] );
        }

        #return @tree_lines;
        return;
    };

    return $closure->( $dep_tree, $max_depth, [ ] );
}

#---FUNCTION---
# Usage   : my $traver = make_traverser( { print (shift)->[0], "\n"; }, 'bfs' );
#           $traver->( $tree );
# Purpose : Creates a traverser closure that can be called on our tree
#           structure.
# Params  : $user_func - A coderef that will be called on every tree
#                        node in the tree.
#           $type      - Either 'bfs' or 'dfs', instructing whether to use
#                        a breadth-first search or a depth-first search.
#                        Defaults to 'bfs' if not provided, case-insensitive.
# Comment : The tree is traversed with a Breadth-First-Search algorithm.
#--------------
sub make_traverser
{
    die 'Invalid arguments to make_traverser' if ( @_ < 1 );
    my ($user_func, $type) = @_;

    my (%we_visited, $closure);

    $type = 'BFS' unless ( defined $type );
    $type = uc $type;

    my $bfs_code = sub {
        my $tree_node = shift;
        return if $we_visited{$tree_node};

        local $_ = $tree_node;
        $user_func->($tree_node);
        $we_visited{$tree_node} = 1;

        for my $i ( 1 .. $#$tree_node ) {
            $closure->($tree_node->[$i]);
        }

        return;
    };

    my $dfs_code = sub {
        my $tree_node = shift;
        return if $we_visited{$tree_node}++;

        for my $i ( 1 .. $#$tree_node ) {
            $closure->($tree_node->[$i]);
        }

        local $_ = $tree_node;
        $user_func->($tree_node);

        return;
    };

    $closure = ( $type eq 'BFS' ? $bfs_code :
                 $type eq 'DFS' ? $dfs_code :
                 die q{Invalid argument $type, must be either 'DFS' or 'BFS'}
                );

    return $closure;

}

#---FUNCTION---
# Usage   : my $tree = make_dep_tree( $filepath_or_libname );
# Params  : filepath_or_libname - File or library to become the tree-top.
# Returns : A tree represented as nested array refs.  This tree represents
#           all the dependencies of the program, the deps' dependencies, etc...
#--------------
sub make_dep_tree
{
    # Create a closure in order to keep our hash hidden...
    my (%node_of, $closure);

    $closure = sub {
        my ($file_or_lib) = @_;

        return $node_of{$file_or_lib} if ( exists $node_of{$file_or_lib} );

        my $file_fqp = ( -e $file_or_lib
                         ? $file_or_lib
                         : DynaLoader::dl_findfile($file_or_lib) );

        my $new_node = ( $file_fqp
                         ? [ [ $file_or_lib, $file_fqp ] ]
                         : [ [ ("*MISSING* $file_or_lib") x 2 ] ] );

        $node_of{$file_or_lib} = $new_node;

        # Give up on this path if we can't find a library file...
        return $new_node unless ($file_fqp);

        my @needed_libs = eval { readelf_depends($file_fqp) };

        # Recurse until we have checked every library...
        my @found_paths;

        for my $sharedlib (@needed_libs) {
            my $child_paths = $closure->($sharedlib);

            if ( defined $child_paths ) {
                push @{$new_node}, $child_paths;
            }
        }

        return $new_node;
    };

    return $closure->(@_);
}

#---FUNCTION---
# Usage   : my $was_found = prune_tree( $tree, $target_lib );
# Purpose : Deletes any sub-trees that do not contain the target.
# Params  : $tree       - A dependency tree as returned by make_dep_tree
#           $target_lib - The _exact_ library _name_ to search for.
# Returns : 1 if the target_lib was found in the given tree
#           0 if the target_lib could not be found
# Comment : The tree is modified in place and completely destroyed
#           if the target isn't found.
#--------------
sub prune_tree
{
    die 'Invalid arguments to prune_tree' if ( @_ != 2 );
    my ($tree, $target_lib) = @_;

    my (%did_visit, $closure);

    $closure = sub {
        my $tree_node = shift;

        my $node_name = $tree_node->[0][0];

        # Watchout for missing libs we tagged earlier...
        if ( $node_name =~ /$MISSING_MATCH/o ) {
            $node_name = $1;
        }

        # Check for our target before we check if we already visited
        # this node, for there could be many instances of our target...
        if ( $node_name eq $target_lib ) {
            splice @{$tree_node}, 1;
            return 1;
        }

        return 0 if ( $did_visit{$tree_node}++ );

        my $was_found = 0;
        my $i         = 1;

        # Remove sub-trees that do not contain our target...
        RECURSE_LOOP:
        while ( $i <= $#$tree_node ) {
            my $child_node = $tree_node->[$i];
            unless ( $closure->($child_node) ) {
                splice @{$tree_node}, $i, 1;
                next RECURSE_LOOP;
            }
            $was_found = 1;
            ++$i;
        }

        return $was_found;
    };

    return $closure->($tree);
}


####
#### SCRIPT START
####

# Finds readelf and pacman programs...
$PACMAN_PATH  = can_run('pacman')
    or die "error: Cannot find the pacman program, a requirement of $0\n";
$READELF_PATH = can_run('readelf')
    or die "error: Cannot find the readelf program, a requirement of $0\n";

die << 'END_ERROR' unless ( IPC::Cmd->can_capture_buffer );
Unknown Internal Error:

The perl IPC::Cmd module reports it cannot capture output from called
programs.  You might need to install the perl IPC::Open3 or IPC::Run
modules for perl on your system.
END_ERROR

# Get command lines options and print usage if a problem occurs...
my ($show_path, $show_help, $show_man,
    $max_depth, $use_bfs, $verbose);

$verbose = 0;

GetOptions( 'depth=i'  => \$max_depth,
            'verbose+' => \$verbose,

            'path'    => \$show_path,
            'help'     => \$show_help,
            'man'      => \$show_man );

my ($elf_file, $target_lib) = @ARGV;

pod2usage({ -verbose => 2 }) if ($show_man);
pod2usage({ -verbose => 1 }) if ($show_help);
pod2usage() if (!$elf_file);
pod2usage("error: $elf_file not found\n") if ( ! -e $elf_file );

# We want to limit our printing depth if we have a greater verbosity
# level, otherwise the tree gets very spammy!
$max_depth ||= ( $verbose >= 1 ? 4 : 8 );

# Create our recursive dependency tree...
my $dep_tree = make_dep_tree($elf_file);

die 'Unknown internal error: $verbose is negative' if ( $verbose < 0 );

if ($target_lib) {
    die qq{Could not find target library named '$target_lib' in dependencies\n}
        unless prune_tree( $dep_tree, $target_lib );

    print_tree( $dep_tree, $max_depth, $show_path );
    exit 0;
}

# Clip our tree unless we have full verbosity...
if ( $verbose < 2 ) {
    my $tree_clipper = make_traverser( do {
        # Create a different clipping action depending on verbosity level...
        my @dispatch =
            (
             # Only keep the first copy of a library that is found
             sub {
                 my ($node, $child_idx) = @_;
                 splice @{$node}, $child_idx, 1;
                 return $child_idx;
             },
             # Tag all duplicate copies with '...' & remove children
             sub {
                 my ($node, $child_idx)        = @_;
                 my ($child_name, $child_path) = @{$node->[$child_idx][0]};
                 $node->[$child_idx]    = [ [ "$child_name ...", "$child_path ..." ] ];
                 return $child_idx + 1;
             },
            );

        # Search for duplicates and "clip" them with BFS traverser...
        my $clip_func = $dispatch[$verbose];
        my %has_dup;

        sub {
            my $node = shift;
            my $i    = 1;

            CHILD_NODE:
            while ( $i <= $#$node ) {
                my $child_node = $node->[$i];
                if ( $has_dup{$child_node}++ ) {
                    $i = $clip_func->($node, $i);
                    next CHILD_NODE;
                }
                ++$i;
            }
            return;
        };
    } );

    $tree_clipper->($dep_tree);
}

print_tree( $dep_tree, $max_depth, $show_path );

exit 0;

__END__

=head1 NAME

treeldd - tree & ldd's forbidden lovechild

=head1 VERSION

Version 0.01 -- April 9, 2009
First Public Release

=head1 SYNOPSIS

treeldd <options> [path to binary] <target library>

If a target library is specified treeldd display only paths going to
the target library.

  Options:
   -h, --help       a long help screen, describing options fully
   -m, --man        display all documentation with a pager like more
   -p, --path       prints out the full path of each library
   -v, --verbose    increases how much of the tree is printed,
                    - once displays redundant entries
                    - twice displays infinitely redundant entries,
                      limited only by --depth
                    (ignored when target library is specified)
   -d, --depth=NUM  how deep in the tree to print when verbose

=head1 OPTIONS

=over

=item -v, --verbose

Each time you use this flag it increases the verbosity level.  Because
dependencies can be circular (A depends on B, B depends on C, C
depends on A, etc.)  the tree is pretty much as large as you let it
be.

=over

=item B<0 (DEFAULT)>

Each library is only displayed once, even if it appears deeper inside
the dependency tree.

=item B<1>

Duplicate libraries that are deeper in the tree are appended with an
ellipsis ('...').  Libraries these duplicates require are not
displayed.  This way the tree size is limited.

=item B<2>

There is no limit to how many times a library can be displayed in the
tree.  This can display an infinitely large dependency tree, watch out!
The only limit to tree size is the --depth option.

=back

=back

=head1 DESCRIPTION

Displays a tree diagram representing shared library dependencies.
A target library can be specified to limit branches only to those
leading from the elf binary to the given library name.

The elf binary starting point can be a shared library or executable.

Common libraries from glibc, gcc-libs, and crypt are ignored because
they appear so regularly they become redundant.

=head1 BACKGROUND

This utility was created in order for me to understand shared
libraries on Linux.  I hadn't even considered that the L<ldd(1)>
command displayed recursive dependencies.  I created this program in
order to see what was really going on.  More specifically I wanted to
see how packages of files depended on one another, in a hierarchy.

=head1 SEE ALSO

=over

=item L<tree(1)>

Where the tree display format came from.

=item L<ldd(1)>

Who introduced me to lists of shared libraries.

=item L<readelf(1)>

Who reads the (non-recursive) list of needed shared libraries for us.

=item archtreeldd

The sister script to this script which can help to find libraries
that go missing when you upgrade a pacman package.  Also useful to see
the tangled web of package dependencies through their used shared
libraries.

=back

=head1 AUTHOR

Justin Davis, C<< <jrcd83 at gmail.com> >>

=head1 COPYRIGHT & LICENSE

Copyright 2009 Justin Davis, all rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


=cut
